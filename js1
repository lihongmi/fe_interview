
1、说一下let, const ,var 三者有什么区别 ？？
    1、var定义的变量可以修改，如果不初始化会输出undefined，不会报错，会有变量提升。

    2、let是块级作用域，函数内部使用let定义后，对函数外部无影响，没有变量提升。

    3、const是常量，const定义的变量不可以修改，而且必须初始化。

2、简述同步和异步的区别
    1、同步是阻塞模式，异步是非阻塞模式。 同步就是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，直到收到返回信息才继续执行下去；

    2、异步是指进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进行处理，这样可以提高执行的效率。

3、简述下vue的生命周期
它可以总共分为8个阶段：
beforeCreate（创建前）,

created（创建后）,

beforeMount(载入前),

mounted（载入后）,

beforeUpdate（更新前）,

updated（更新后）,

beforeDestroy（销毁前）,

destroyed（销毁后）

4.如何编写高性能的 JavaScript？

遵循严格模式："use strict";
将 js 脚本放在页面底部，加快渲染页面
将 js 脚本将脚本成组打包，减少请求
使用非阻塞方式下载 js 脚本
尽量使用局部变量来保存全局变量
尽量减少使用闭包
使用 window 对象属性方法时，省略 window
尽量减少对象成员嵌套
缓存 DOM 节点的访问
通过避免使用 eval() 和 Function() 构造器
给 setTimeout() 和 setInterval() 传递函数而不是字符串作为参数
尽量使用直接量创建对象和数组
最小化重绘(repaint)和回流(reflow)

5.
什么是函数节流？介绍一下应用场景和原理？
函数节流(throttle)是指阻止一个函数在很短时间间隔内连续调用。 只有当上一次函数执行后达到规定的时间间隔，才能进行下一次调用。 但要保证一个累计最小调用间隔（否则拖拽类的节流都将无连续效果）
函数节流用于 onresize, onscroll 等短时间内会多次触发的事件
函数节流的原理：使用定时器做时间节流。 当触发一个事件时，先用 setTimout 让这个事件延迟一小段时间再执行。 如果在这个时间间隔内又触发了事件，就 clearTimeout 原来的定时器， 再 setTimeout 一个新的定时器重复以上流程。
6.
渐进增强和优雅降级
渐进增强 ：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。
优雅降级 ：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容

7.
请解释一下 JavaScript 的同源策略
概念:同源策略是客户端脚本（尤其是 Javascript）的重要的安全度量标准。它最早出自 Netscape Navigator2.0，其目的是防止某个文档或脚本从多个不同源装载。这里的同源策略指的是：协议，域名，端口相同，同源策略是一种安全协议
指一段脚本只能读取来自同一来源的窗口和文档的属性


8.
Web前端性能优化
1 页面级优化
1.1 减少http请求

1.2 加快DNS解析

1.3 设置http缓存

1.4 资源合并(JS,CSS)

1.5 资源前端压缩

1.6 图片精灵(sprite)

1.7 data: URL scheme

1.8 服务端压缩gzip

1.9 图片懒加载

1.10 css头部加载

1.11 JS异步加载

1.12 JS按需加载

1.13 减少http重定向

1.14 优化DOM结构

1.15 图片不失真压缩

1.16 接口合并

2 部署优化
2.1 多域名资源服务器

2.2 CDN

2.3 静态资源缓存服务器

3 代码级优化
3.1 减少Dom节点查找(缓存DOM选择器)

3.1.1 Html Collection

3.1.2 减少Reflow(重排)

3.1.3 减少Repaint(重绘)

3.2 避免使用eval和Function

3.3 慎用with

3.4 减少作用域链查找

3.5 数据访问，利用局部变量

3.6 字符串拼接用数组join

3.7 事件绑定多用委托

3.8 css选择符（从右往左）

3.9 resize使用计时器绑定时间间隔

3.10 内存使用与释放控制

3.11 scroll和resize等事件触发采用函数节流(setTimeout)

3.12 巧用缓存

4 JQuery优化
4.1 总是从ID选择器开始继承

4.2 在class前使用tag

4.3 将jquery对象缓存起来

4.4 掌握强大的链式操作

4.5 使用子查询

4.6 对直接的DOM操作进行限制

4.7 冒泡

4.8 消除无效查询

4.9 推迟到 $(window).load


